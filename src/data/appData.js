// src/data/appData.js

// IMPORTANT FIX: This API_BASE_URL must match the base of your backend routes.
// Your backend routes start with '/api/...' so the base URL should not include '/api/data'.
const API_BASE_URL = 'http://localhost:5000/api'; // <<< CORRECTED LINE HERE

// Helper to generate unique IDs (useful for client-side creation before sending to API if ID isn't generated by DB)
export const generateUniqueId = () => {
  return Date.now().toString(36) + Math.random().toString(36).substring(2);
};

// --- FETCH FUNCTIONS ---

export const fetchData = async (endpoint) => {
  try {
    // Correct usage: Use template literals for URL construction.
    // Example: `${API_BASE_URL}/projects` will now resolve to `http://localhost:5000/api/projects`
    const response = await fetch(`${API_BASE_URL}/${endpoint}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Error fetching ${endpoint}:`, error);
    throw error;
  }
};

export const fetchItemById = async (endpoint, id) => {
  try {
    // Correct usage: Use template literals for URL construction
    const response = await fetch(`${API_BASE_URL}/${endpoint}/${id}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Error fetching ${endpoint} with ID ${id}:`, error);
    throw error;
  }
};

// These functions will now correctly form URLs like http://localhost:5000/api/projects
export const fetchTeamMembers = () => fetchData('team'); // Assuming your backend endpoint is '/api/team'
export const fetchProjects = () => fetchData('projects');
export const fetchNews = () => fetchData('news');
export const fetchPosterPresentations = () => fetchData('posters');
export const fetchConferencePublications = () => fetchData('conferences');
export const fetchJournalPublications = () => fetchData('journals');

export const fetchNewsById = (id) => fetchItemById('news', id);
export const fetchProjectById = (id) => fetchItemById('projects', id);
// export const fetchTeamMemberById = (id) => fetchItemById('team', id); // Corrected endpoint for consistency
export const fetchPosterById = (id) => fetchItemById('posters', id);
export const fetchConferenceById = (id) => fetchItemById('conferences', id);
export const fetchJournalById = (id) => fetchItemById('journals', id);

// --- CRUD FUNCTIONS ---

export const addDataItem = async (endpoint, item) => {
  try {
    const response = await fetch(`${API_BASE_URL}/${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(item),
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Error adding item to ${endpoint}:`, error);
    throw error;
  }
};

export const updateDataItem = async (endpoint, item) => {
  try {
    const response = await fetch(`${API_BASE_URL}/${endpoint}/${item.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(item),
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    return await response.json(); // Or return success message
  } catch (error) {
    console.error(`Error updating item ${item.id} in ${endpoint}:`, error);
    throw error;
  }
};

export const deleteDataItem = async (endpoint, id) => {
  try {
    const response = await fetch(`${API_BASE_URL}/${endpoint}/${id}`, {
      method: 'DELETE',
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }
    return await response.json(); // Or return success message
  } catch (error) {
    console.error(`Error deleting item ${id} from ${endpoint}:`, error);
    throw error;
  }
};